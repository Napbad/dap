{
  "name": "dap",
  "scopeName": "source.dap",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "\\b(return|if|else|for|while|package|include|break|continue|try|catch|finally|var|imt|fun|class|enum|interface|annotation|public|private|protected|static|new|override|native|synchronized|throw|delete|byte|short|int|uint|ushort|long|ulong|llong|ullong|float|double|bool|char|string|void|const)\\b",
          "name": "keyword.control.dap"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double.dap",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.dap"
            }
          ]
        },
        {
          "begin": "'",
          "end": "'",
          "name": "string.quoted.single.dap",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.dap"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "//",
          "end": "$",
          "name": "comment.line.double-slash.dap"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.dap"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.dap"
        },
        {
          "match": "\\b(0|[1-9]\\d*)\\b",
          "name": "constant.numeric.integer.dap"
        },
        {
          "match": "\\b(0|[1-9]\\d*)\\.\\d+\\b",
          "name": "constant.numeric.float.dap"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z_][a-zA-Z_0-9]*\\b",
          "name": "variable.other.dap"
        }
      ]
    }
  }
}